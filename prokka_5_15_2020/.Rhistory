knitr::opts_chunk$set(echo = TRUE)
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("ggraph")
install.packages("visNetwork")
install.packages("threejs")
install.packages("networkD3")
install.packages("ndtv")
knitr::opts_chunk$set(echo = TRUE)
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("ggraph")
install.packages("visNetwork")
install.packages("threejs")
install.packages("networkD3")
install.packages("ndtv")
library("igraph")
nodes <- read.csv("NODES", header=F, as.is=T)
links <- read.csv("EDGES", header=F, as.is=T)
head(nodes)
head(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
#E(net)$width <- E(net)$weight
deg <- degree(net, mode="all")
V(net)$size <- deg
net
E(net)$width #<- E(net)$weight
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_with_fr)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_randomly)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=lw)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=l)
l <- layout_with_kk(net.bg)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=l)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_with_lgl)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_with_mds)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_nicely)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_on_sphere)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_on_grid)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_with_fr)
l <- layout_with_kk(net)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="blue", layout=layout_with_gem)
knitr::opts_chunk$set(echo = TRUE)
library("igraph")
nodes <- read.csv("VGAS_CORRECTED", header=F, as.is=T)
links <- read.csv("VGAS_EDGES", header=F, as.is=T)
head(nodes)
head(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
#E(net)$width <- E(net)$weight
deg <- degree(net, mode="all")
V(net)$size <- deg
net
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="red", layout=layout_with_mds)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="red", layout=layout_with_gem)
knitr::opts_chunk$set(echo = TRUE)
library("igraph")
nodes <- read.csv("VGAS_CORRECTED", header=F, as.is=T)
links <- read.csv("VGAS_EDGES", header=F, as.is=T)
head(nodes)
head(links)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- simplify(net, remove.multiple = F, remove.loops = T)
#E(net)$width <- E(net)$weight
deg <- degree(net, mode="all")
V(net)$size <- deg
net
E(net)$width #<- E(net)$weight
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="red", layout=layout_with_gem)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="red", layout=layout_as_star)
plot(net, edge.arrow.size=.2,vertex.label=NA, edge.color="red", layout=layout_components)
vertex.shape="none", vertex.label=V(net)$nodes,
plot(net, vertex.shape="none", vertex.label=V(net)$nodes,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
plot(net, vertex.shape="none", vertex.label=V(net)$nodes,
vertex.label.font=1, vertex.label.color="gray40",
vertex.label.cex=.1, edge.color="gray85")
edge.start <- ends(net, es=E(net), names=F)[,1]
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1)
edge.start <- ends(net, es=E(net), names=F)[,1]
edge.col <- V(net)$color[edge.start]
plot(net, edge.color=edge.col, edge.curved=.1,layout_with_fr)
# Function for Jaccard index
jaccard_index<-function(g1,g2) {
library(igraph)
g1<-get.adjacency(g1)
g1[g1 > 0.001] <- 1
g2<-get.adjacency(g2)
g2[g2 > 0.001] <- 1
A<-sum(g1 != g2) # edges that changed (0->1 and 1->0)
B<-sum(g1 * g2) # edges that have a 1 in M1 and 1 in M2, so stayed the same (1->1)
return(round(B/sum(A,B),digits = 2)) # the ratio of stable ties ties (B), compared to all ties who change (A) + stable ties (B)
on.exit(rm(A,B))
}
#Test Run Setup
set.seed(1337)
Test_Network_1<-matrix(nrow = 10, ncol = 10)    # 1 row and 1 column per participant
for (i in sample(1:10,13,replace=T)) {          # randomly select a number between 1 and 10, and the same numbers can be used multiple times. We do this 13 times
Test_Network_1[i,sample(1:10,1,replace=T)]<-1 # for each randomly selected participant, randomly assign and alter (again, between 1 and 10) to create an edge
}
sum(Test_Network_1,na.rm=TRUE)
# Count Elements in a Matrix
sum(Test_Network_1,na.rm=TRUE)
# Count Elements in a Matrix
Test_Network_2<-Test_Network_1
# make a network out of the matrices
library(igraph)
##
## Attaching package: 'igraph'
## The following objects are masked from 'package:stats':
##
##     decompose, spectrum
## The following object is masked from 'package:base':
##
##     union
Test_Graph_1<-graph_from_adjacency_matrix(Test_Network_1, mode = c("directed"))
Test_Graph_2<-graph_from_adjacency_matrix(Test_Network_2, mode = c("directed"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("igraph")
install.packages("network")
knitr::opts_chunk$set(echo = TRUE)
library("igraph")
nodes <- read.csv("NODES", header=F, as.is=T)
links <- read.csv("EDGES", header=F, as.is=T)
# Function for Jaccard index
jaccard_change<-function(g1,g2) {
library(igraph)
g1<-get.adjacency(g1)
g1[g1 > 0.001] <- 1
g2<-get.adjacency(g2)
g2[g2 > 0.001] <- 1
Title<-"Numbers represent edges"
Left<-sum(g1 > g2) # edges that changed (1->0)
Right<-sum(g1 < g2) # edges that changed (0->1)
Both<-sum(g1 * g2) # edges that have a 1 in M1 and 1 in M2, so stayed the same (1->1)
Index<-round(Both/sum(Left,Right,Both),digits = 2) # the ratio of stable ties ties (B), compared to all ties who change (A) + stable ties (B)
Results<-return(structure(list(Title,Index,Left,Right,Both),names=c("Title","Jaccard_Index","Left_Network_Only", "Right_Network_Only", "Both_Networks")))
on.exit(rm(Left,Right,Both,Index))
}
# make a network out of the matrices
library(igraph)
##
## Attaching package: 'igraph'
## The following objects are masked from 'package:stats':
##
##     decompose, spectrum
## The following object is masked from 'package:base':
##
##     union
nodes <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_CORRECTED2", header=F, as.is=T)
links <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_EDGES", header=F, as.is=T)
# make a network out of the matrices
library(igraph)
##
## Attaching package: 'igraph'
## The following objects are masked from 'package:stats':
##
##     decompose, spectrum
## The following object is masked from 'package:base':
##
##     union
vgas_nodes <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_CORRECTED2", header=F, as.is=T)
vgas_links <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_EDGES", header=F, as.is=T)
head(vgas_nodes)
head(vgas_links)
vgas_net <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
# make a network out of the matrices
library(igraph)
##
## Attaching package: 'igraph'
## The following objects are masked from 'package:stats':
##
##     decompose, spectrum
## The following object is masked from 'package:base':
##
##     union
#VGAS
vgas_nodes <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_CORRECTED2", header=F, as.is=T)
vgas_links <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_EDGES", header=F, as.is=T)
#Prokka
prokka_nodes <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/prokka_5_15_2020/NODES", header=F, as.is=T)
prokka_links <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/prokka_5_15_2020/EDGES", header=F, as.is=T)
head(vgas_nodes)
head(vgas_links)
head(prokka_nodes)
head(prokka_links)
vgas_net <- graph_from_data_frame(d=vgas_links, vertices=vgas_nodes, directed=F)
prokka_net <- graph_from_data_frame(d=prokka_links, vertices=prokka_nodes, directed=F)
# Function for Jaccard index
jaccard_change<-function(g1,g2) {
library(igraph)
g1<-get.adjacency(g1)
g1[g1 > 0.001] <- 1
g2<-get.adjacency(g2)
g2[g2 > 0.001] <- 1
Title<-"Numbers represent edges"
Left<-sum(g1 > g2) # edges that changed (1->0)
Right<-sum(g1 < g2) # edges that changed (0->1)
Both<-sum(g1 * g2) # edges that have a 1 in M1 and 1 in M2, so stayed the same (1->1)
Index<-round(Both/sum(Left,Right,Both),digits = 2) # the ratio of stable ties ties (B), compared to all ties who change (A) + stable ties (B)
Results<-return(structure(list(Title,Index,Left,Right,Both),names=c("Title","Jaccard_Index","Left_Network_Only", "Right_Network_Only", "Both_Networks")))
on.exit(rm(Left,Right,Both,Index))
}
# make a network out of the matrices
library(igraph)
##
## Attaching package: 'igraph'
## The following objects are masked from 'package:stats':
##
##     decompose, spectrum
## The following object is masked from 'package:base':
##
##     union
#VGAS
vgas_nodes <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_CORRECTED2", header=F, as.is=T)
vgas_links <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/vgasReports/VGAS_EDGES", header=F, as.is=T)
#Prokka
prokka_nodes <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/prokka_5_15_2020/NODES", header=F, as.is=T)
prokka_links <- read.csv("/Users/tyromesweet/Documents/GitHub/Going_through_phages/prokka_5_15_2020/EDGES", header=F, as.is=T)
head(vgas_nodes)
head(vgas_links)
head(prokka_nodes)
head(prokka_links)
vgas_net <- graph_from_data_frame(d=vgas_links, vertices=vgas_nodes, directed=F)
prokka_net <- graph_from_data_frame(d=prokka_links, vertices=prokka_nodes, directed=F)
jaccard_index(vgas_net,prokka_net)
vgas_net <- graph_from_data_frame(d=vgas_links, vertices=vgas_nodes, directed=F)
prokka_net <- graph_from_data_frame(d=prokka_links, vertices=prokka_nodes, directed=F)
print(vgas_net)
print(prokka_net)
vgas_net <- graph_from_data_frame(d=vgas_links, vertices=vgas_nodes, directed=T)
prokka_net <- graph_from_data_frame(d=prokka_links, vertices=prokka_nodes, directed=T)
print(vgas_net)
print(prokka_net)
jaccard_index(vgas_net,prokka_net)
